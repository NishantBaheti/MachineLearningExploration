{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hypothesis Testing "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Null Hypothesis (H0)\n",
    "- To check whether claim is applicable or not \n",
    "- States that there is no significant difference between a set of a variable \n",
    "- in simple words everything is same or equal\n",
    "\n",
    "### Alternate Hypothesis (H1 / Ha)\n",
    "- to challenge currently accepted state of knowledge\n",
    "- More precisely states that there is a significant difference between a set of a variable\n",
    "\n",
    "\n",
    "`Null Hypothesis and Alternate Hypothesis are mutually exclusive`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Steps for Hypothesis Testing \n",
    "\n",
    "                    Start\n",
    "                     |\n",
    "                     v\n",
    "            State both Hypothesises\n",
    "                     |\n",
    "                     v\n",
    "           Formulate analysis plan \n",
    "                     |\n",
    "                     v\n",
    "        Analyze data (mean, population, z=score)\n",
    "                     |\n",
    "                     v\n",
    "        Interpret Results (apply decision rules)\n",
    "                     |\n",
    "                     V\n",
    "                    End "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " \n",
    "- Define Hypothesis H0,Ha\n",
    "- Select test statistics whose probability distribution function can be found under the Null Hypothesis\n",
    "- Collect data \n",
    "- Compute test statistics and calculate p-value under null hypothesis\n",
    "- Reject Null Hyppthsis if p-value is lower then predetermined significance value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Types of tests\n",
    "\n",
    "- One tailed : Region of rejection is only on one side of sampling distribution\n",
    "- Two tailed : Region of rejection is on both sides of sampling distribution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Decision rules \n",
    "- p-value\n",
    "- region of acceptance "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### P Value\n",
    "\n",
    "- possibility for the `null hypothesis` to be true\n",
    "- like p-value is the probability of observing another mean value that is at least as extreme as the value found from the sample data.(still not clear to me)\n",
    "\n",
    "\n",
    "| The P-value interpretation table ||\n",
    "|-|-|\n",
    "| Less than 0.01 | strong evidence against Null Hypothesis, very statistically significant |\n",
    "| 0.01 to 0.05 | Some evidence against Null Hypothesis, statistically significant | \n",
    "| Greater than 0.05 | Insufficient evidence against Null Hypothesis | \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt \n",
    "import seaborn as sns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "mu = 50\n",
    "sigma = 15\n",
    "number_of_records = 10000\n",
    "observe_data = [30,85]\n",
    "\n",
    "significance_level = 0.05\n",
    "data = np.random.normal(loc=mu,scale=sigma,size=(number_of_records,))\n",
    "\n",
    "## sort the array and get 0.025 % data indeces from both of the sides\n",
    "## it will give the boundry for 0.05 % population\n",
    "sorted_data = np.sort(data)\n",
    "significance_index = int((p_value/2)*number_of_records)\n",
    "\n",
    "left_bound = sorted_data[0]\n",
    "left_side = sorted_data[significance_index]\n",
    "right_side = sorted_data[(number_of_records-1)-significance_index]\n",
    "right_bound = sorted_data[number_of_records-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-52-2b25423ed9f7>:26: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "    \n",
    "fig = plt.figure(figsize=(10,7))\n",
    "ax = fig.add_subplot(1,1,1)\n",
    "\n",
    "mean = np.mean(data)\n",
    "median = np.median(data)\n",
    "std_dev = np.std(data)\n",
    "\n",
    "for i in range(1,5):\n",
    "    ax.axvline(mean+i*std_dev,c='grey',ls=\"--\")\n",
    "    ax.axvline(mean-i*std_dev,c='grey',ls=\"--\")\n",
    "\n",
    "\n",
    "for od in observe_data: \n",
    "    ax.axvline(od,c='black',lw=1.5,fillstyle='left')\n",
    "    x_ticks = np.append(ax.get_xticks(), od)\n",
    "    ax.set_xticks(x_ticks)\n",
    "\n",
    "ax.axvline(mean,label=\"mean\",c='b',lw=1.5)\n",
    "ax.axvline(median,label=\"median\",c=\"r\",ls=\"--\")\n",
    "\n",
    "ax.axvspan(left_bound, left_side, alpha=0.8, color='grey')\n",
    "ax.axvspan(right_side, right_bound, alpha=0.8, color='grey')\n",
    "\n",
    "sns.distplot(data,bins=20,norm_hist=True)\n",
    "ax.legend()\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Grey part is showing combined 0.05 % of the data\n",
    "- blue part is showing rest 95% of the data\n",
    "- like 30 is in the most population (p > 0.05)(accept null hypothesis)\n",
    "- 85 is in the grey area , out of significance level (p_value < 0.05) (reject null hypothesis)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Decision Errors \n",
    "\n",
    "| Type 1 Error | Type 2 Error | \n",
    "| ------------ | ------------ | \n",
    "| Occurs when a researcher rejects a Null Hypothesis when it is true | Fails to reject an Hypothesis when it is false |\n",
    "| False Positive | False Negative | \n",
    "| Significance Level : probability of commiting a Type 1 error | Power Of Test : probability of not commiting a Type 2 error | \n",
    "| alpha | beta |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test Statistics \n",
    "\n",
    "The methods used for performing t-test are shown below.\n",
    "\n",
    "- stats.ttest_1samp: Tests if the mean of a population is a given value.\n",
    "- stats.ttest_ind: Tests if the means of two independent samples are equal.\n",
    "- stats.ttest_rel: Tests if the means of two paired samples are equal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example \n",
    "- Normally estimation for mean and variance of sample is made and test statistics is calculated  \n",
    "- if population variance is identified, it is reasonable to consider that test statisics is normally distributed\n",
    "- if variance is unknown, sample variance is used and test statistics follows t distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "H0 : mean of the population is 1.0\n",
      "\n",
      "p-value : 0.0013513182796454544\n",
      "t-score : -3.2984836759256875\n",
      "\n",
      "H0 is rejected.\n"
     ]
    }
   ],
   "source": [
    "np.random.seed(10)\n",
    "mu, sigma = 0.8, 0.5\n",
    "significanceLevel = 0.05 ## 5%\n",
    "\n",
    "H0 = '''H0 : mean of the population is 1.0'''\n",
    "\n",
    "normDist = stats.norm(mu,sigma)\n",
    "\n",
    "## Derive a sample \n",
    "n = 100\n",
    "sample = normDist.rvs(n)\n",
    "\n",
    "## compute test statistics \n",
    "t, p = stats.ttest_1samp(sample , 1.0)\n",
    "\n",
    "print(H0)\n",
    "print(f\"\"\"\n",
    "p-value : {p}\n",
    "t-score : {t}\n",
    "\"\"\")\n",
    "\n",
    "if p < significanceLevel:\n",
    "    print(\"H0 is rejected.\")\n",
    "else:\n",
    "    print(\"H0 is accepted.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "H0 : population means of two random variables are equal\n",
      "\n",
      "p-value : 0.24665844967219017\n",
      "t-score : -1.1619402232350682\n",
      "\n",
      "H0 is accepted.\n"
     ]
    }
   ],
   "source": [
    "mu1, sigma1 = 0.25, 1.0\n",
    "mu2, sigma2 = 0.50, 1.0\n",
    "\n",
    "significanceLevel = 0.05 ## 5%\n",
    "\n",
    "H0 = '''H0 : population means of two random variables are equal'''\n",
    "\n",
    "normDist1 = stats.norm(mu1,sigma1)\n",
    "normDist2 = stats.norm(mu2,sigma2)\n",
    "\n",
    "## Sample\n",
    "n = 100\n",
    "sample1 = normDist1.rvs(n)\n",
    "sample2 = normDist2.rvs(n)\n",
    "\n",
    "## compute test statistics \n",
    "t, p = stats.ttest_ind(sample1,sample2)\n",
    "\n",
    "print(H0)\n",
    "print(f\"\"\"\n",
    "p-value : {p}\n",
    "t-score : {t}\n",
    "\"\"\")\n",
    "\n",
    "if p < significanceLevel:\n",
    "    print(\"H0 is rejected.\")\n",
    "else:\n",
    "    print(\"H0 is accepted.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "H0 : population means of two paired samples are equal\n",
      "\n",
      "p-value : 0.3444019855090813\n",
      "t-score : -0.950046874746579\n",
      "\n",
      "H0 is accepted.\n"
     ]
    }
   ],
   "source": [
    "mu1, sigma1 = 0.25, 1.0\n",
    "mu2, sigma2 = 0.50, 1.0\n",
    "\n",
    "significanceLevel = 0.05 ## 5%\n",
    "\n",
    "H0 = '''H0 : population means of two paired samples are equal'''\n",
    "\n",
    "normDist1 = stats.norm(mu1,sigma1)\n",
    "normDist2 = stats.norm(mu2,sigma2)\n",
    "\n",
    "## Sample\n",
    "n = 100\n",
    "sample1 = normDist1.rvs(n)\n",
    "sample2 = normDist2.rvs(n)\n",
    "\n",
    "## compute test statistics \n",
    "t, p = stats.ttest_rel(sample1,sample2)\n",
    "\n",
    "print(H0)\n",
    "print(f\"\"\"\n",
    "p-value : {p}\n",
    "t-score : {t}\n",
    "\"\"\")\n",
    "\n",
    "if p < significanceLevel:\n",
    "    print(\"H0 is rejected.\")\n",
    "else:\n",
    "    print(\"H0 is accepted.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.3 64-bit ('anaconda3': conda)",
   "language": "python",
   "name": "python38364bitanaconda3conda5a21e7c9305747559a413d7622491a2e"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hypothesis Testing "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Null Hypothesis (H0)\n",
    "- To check whether claim is applicable or not \n",
    "- States that there is no significant difference between a set of a variable \n",
    "\n",
    "### Alternate Hypothesis (H1 / Ha)\n",
    "- to challenge currently accepted state of knowledge\n",
    "- More precisely states that there is a significant difference between a set of a variable\n",
    "\n",
    "\n",
    "        Null Hypothesis and Alternate Hypothesis are mutually exclusive\n",
    "        \n",
    "###  Steps for Hypothesis Testing \n",
    "                    Start\n",
    "                     |\n",
    "                     v\n",
    "                    State both Hypothesis\n",
    "                     |\n",
    "                     v\n",
    "                    Formulate analysis plan \n",
    "                     |\n",
    "                     v\n",
    "                    Analyze data (mean, population, z=score)\n",
    "                     |\n",
    "                     v\n",
    "                    Interpret Results (apply decision rules)\n",
    "                     |\n",
    "                     V\n",
    "                    End \n",
    "- Define Hypothesis H0,Ha\n",
    "- Select test statistics whose probability distribution function can be found under the Null Hypothesis\n",
    "- Collect data \n",
    "- Compute test statistics and calculate p-value under null hypothesis\n",
    "- Reject Null Hyppthsis if p-value is lower then predetermined significance value\n",
    "\n",
    "### Types of tests\n",
    "\n",
    "- One tailed : Region of rejection is only on one side of sampling distribution\n",
    "- Two tailed : Region of Rejection is on both sides of sampling distribution\n",
    "\n",
    "### Decision rules \n",
    "- p-value\n",
    "- region of acceptance \n",
    "\n",
    "### Decision Errors \n",
    "\n",
    "| Type 1 Error | Type 2 Error | \n",
    "| ------------ | ------------ | \n",
    "| Occurs when a researcher rejects a Null Hypothesis when it is true | Fails to reject an Hypothesis when it is false |\n",
    "| False Positive | False Negative | \n",
    "| Significance Level : probability of commiting a Type 1 error | Power Of Test : probability of not commiting a Type 2 error | \n",
    "| alpha | beta |\n",
    "\n",
    "\n",
    "## Test Statistics \n",
    "\n",
    "The methods used for performing t-test are shown below.\n",
    "\n",
    "- stats.ttest_1samp: Tests if the mean of a population is a given value.\n",
    "- stats.ttest_ind: Tests if the means of two independent samples are equal.\n",
    "- stats.ttest_rel: Tests if the means of two paired samples are equal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example \n",
    "- Normally estimation for mean and variance of sample is made and test statistics is calculated  \n",
    "- if population variance is identified, it is reasonable to consider that test statisics is normally distributed\n",
    "- if variance is unknown, sample variance is used and test statistics follows t distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "H0 : mean of the population is 1.0\n",
      "\n",
      "p-value : 0.0013513182796454544\n",
      "t-score : -3.2984836759256875\n",
      "\n",
      "H0 is rejected.\n"
     ]
    }
   ],
   "source": [
    "np.random.seed(10)\n",
    "mu, sigma = 0.8, 0.5\n",
    "significanceLevel = 0.05 ## 5%\n",
    "\n",
    "H0 = '''H0 : mean of the population is 1.0'''\n",
    "\n",
    "normDist = stats.norm(mu,sigma)\n",
    "\n",
    "## Derive a sample \n",
    "n = 100\n",
    "sample = normDist.rvs(n)\n",
    "\n",
    "## compute test statistics \n",
    "t, p = stats.ttest_1samp(sample , 1.0)\n",
    "\n",
    "print(H0)\n",
    "print(f\"\"\"\n",
    "p-value : {p}\n",
    "t-score : {t}\n",
    "\"\"\")\n",
    "\n",
    "if p < significanceLevel:\n",
    "    print(\"H0 is rejected.\")\n",
    "else:\n",
    "    print(\"H0 is accepted.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "H0 : population means of two random variables are equal\n",
      "\n",
      "p-value : 0.24665844967219017\n",
      "t-score : -1.1619402232350682\n",
      "\n",
      "H0 is accepted.\n"
     ]
    }
   ],
   "source": [
    "mu1, sigma1 = 0.25, 1.0\n",
    "mu2, sigma2 = 0.50, 1.0\n",
    "\n",
    "significanceLevel = 0.05 ## 5%\n",
    "\n",
    "H0 = '''H0 : population means of two random variables are equal'''\n",
    "\n",
    "normDist1 = stats.norm(mu1,sigma1)\n",
    "normDist2 = stats.norm(mu2,sigma2)\n",
    "\n",
    "## Sample\n",
    "n = 100\n",
    "sample1 = normDist1.rvs(n)\n",
    "sample2 = normDist2.rvs(n)\n",
    "\n",
    "## compute test statistics \n",
    "t, p = stats.ttest_ind(sample1,sample2)\n",
    "\n",
    "print(H0)\n",
    "print(f\"\"\"\n",
    "p-value : {p}\n",
    "t-score : {t}\n",
    "\"\"\")\n",
    "\n",
    "if p < significanceLevel:\n",
    "    print(\"H0 is rejected.\")\n",
    "else:\n",
    "    print(\"H0 is accepted.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "H0 : population means of two paired samples are equal\n",
      "\n",
      "p-value : 0.3444019855090813\n",
      "t-score : -0.950046874746579\n",
      "\n",
      "H0 is accepted.\n"
     ]
    }
   ],
   "source": [
    "mu1, sigma1 = 0.25, 1.0\n",
    "mu2, sigma2 = 0.50, 1.0\n",
    "\n",
    "significanceLevel = 0.05 ## 5%\n",
    "\n",
    "H0 = '''H0 : population means of two paired samples are equal'''\n",
    "\n",
    "normDist1 = stats.norm(mu1,sigma1)\n",
    "normDist2 = stats.norm(mu2,sigma2)\n",
    "\n",
    "## Sample\n",
    "n = 100\n",
    "sample1 = normDist1.rvs(n)\n",
    "sample2 = normDist2.rvs(n)\n",
    "\n",
    "## compute test statistics \n",
    "t, p = stats.ttest_rel(sample1,sample2)\n",
    "\n",
    "print(H0)\n",
    "print(f\"\"\"\n",
    "p-value : {p}\n",
    "t-score : {t}\n",
    "\"\"\")\n",
    "\n",
    "if p < significanceLevel:\n",
    "    print(\"H0 is rejected.\")\n",
    "else:\n",
    "    print(\"H0 is accepted.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.3 64-bit ('anaconda3': conda)",
   "language": "python",
   "name": "python38364bitanaconda3conda5a21e7c9305747559a413d7622491a2e"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
